plugins {
    id 'application'
    id 'jacoco'
    id 'io.freefair.lombok' version '6.6.1'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'com.google.cloud.tools.jib' version '3.3.2'
}

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/repositories/releases/')
    }
}

def ENV = System.getenv()

def gitRef = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--quiet', '--revs-only', '--verify', '--short', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

group = 'net.ripe.rpki.ta'
version = ENV['RELEASE_VERSION'] ?: gitRef()
description = 'RIPE NCC Trust Anchor'

dependencies {
    implementation 'net.ripe.rpki:rpki-commons:1.30'
    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    runtimeOnly 'org.slf4j:slf4j-simple:2.0.7'

    testImplementation(platform('org.junit:junit-bom:5.9.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs << "-Xlint:all" << "-Werror"
distTar.compression = Compression.GZIP

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

application {
    mainClass = 'net.ripe.rpki.ta.Main'
}

task executableJar(type: Jar) {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    archiveFileName = rootProject.name + '.jar'
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/LICENSE*"
        exclude "META-INF/NOTICE*"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
        exclude "META-INF/versions/9/module-info.class"
    }
    with jar
}

test {
    useJUnitPlatform {}

    // Coverage with jacoco
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}

sonarqube {
    properties {
        property 'sonar.qualitygate.wait', 'true'
        property 'sonar.qualitygate.timeout', System.getenv('SONAR_QUALITYGATE_TIMEOUT') ?: '300'
    }
}
project.tasks["sonarqube"].dependsOn "test"

// Application plugin sets up distribution. We have to add the buildscripts manually.
distributions {
  main {
    contents {
      from('src/main/scripts') {
        dirMode = 0755
        fileMode = 0555
      }
    }
  }
}

jib {
    from {
      image = "eclipse-temurin:17-jammy"
      platforms {
        platform {
          architecture = 'amd64'
          os = 'linux'
        }
        platform {
          architecture = 'arm64'
          os = 'linux'
        }
      }
    }
    to { image = "ghcr.io/ripe-ncc/rpki-ta-0" }
}
