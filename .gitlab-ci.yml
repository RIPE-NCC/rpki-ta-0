---
image: gradle:jdk8

include:
  # Run pipeline on main branch, merge requests, tags.
  # this is equivalent to `workflow.rules:` that set this up.
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'
  # Whitesource
  - project: 'swe/gitlab-ci'
    file: '/templates/whitesource-scanning.yml'

stages:
  - build
  - test
  - qa
  - deploy

variables:
  BUILD_NUMBER: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle/"
  GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.daemon=false"


build:
  stage: build
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  script: ./gradlew -i build
  artifacts:
    paths:
      - build/distributions/*.tar
      - src/main/scripts/*
      - target/site
      - target/classes
    reports:
      junit:
        - target/surefire-reports/*.xml

######### Test stage #########
sonarqube:
  stage: qa
  needs: ["build"]
  dependencies: ["build"]
  variables:
    GIT_DEPTH: 0
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .gradle/caches
      - .gradle/wrapper
  script:
    - ./gradlew -i -Dsonar.projectKey=rpki-ta-0 sonarqube
  allow_failure: true
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.deploy: &deploy
  stage: deploy
  image: docker-registry.ripe.net/swe/gitlab-ci/debian-deployenv
  before_script:
    - chmod 400 ${SSH_KEY}
    - chmod +x src/main/scripts/*.sh
    - mv build/distributions/rpki-ta-0-*-${BUILD_NUMBER}.tar .
  script:
    # Print public key
    - ssh-keygen -y -l -f ${SSH_KEY}
    - >
      src/main/scripts/deploy.sh ${SSH_KEY}
      rpki-ta-0-*-${BUILD_NUMBER}-dist.tar ${NODES}
  rules:
    - when: manual

localcert:
  <<: *deploy
  variables:
    NODES: "localcert-1.rpki.ripe.net"
  environment:
    name: localcert

prepdev:
  <<: *deploy
  variables:
    NODES: "core-1.rpki.prepdev.ripe.net"
  environment:
    name: prepdev

build_release:
  stage: deploy
  environment:
    name: release
  needs:
    - job: build
      # prevent the non-final artifact from being present in target
      artifacts: false
  variables:
    MAVEN_OPTS: -Dmaven.repo.local=${HOME}/.m2/repository
  script:
    - if [[ "$CI_COMMIT_TAG" =~ ^rpki-ta-0-.* ]]; then echo "Build for tag $CI_COMMIT_TAG"; else exit 1; fi
    # Update version in pom.xml to match the tag
    - mvn versions:set -DnewVersion=$(echo $CI_COMMIT_TAG | sed -e 's/rpki-ta-0-//')
    - mvn verify -Dbuild.number=${CI_PIPELINE_ID}
  only:
    - tags
  artifacts:
    expire_in: never
    paths:
      - target/rpki-*
      - pom.xml*
    reports:
      junit:
        - target/surefire-reports/*.xml
